name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Git Semantic Version #extension para versionamiento
      uses: PaulHatch/semantic-version@v4.0.3
      with:
        major_pattern: "major:" #si mi commit tiene esta palabra, es un cambio en la version mayor
        minor_pattern: "feat:" #si mi commit tiene esta palabra, es un cambio en la version menor
        format: "${major}.${minor}.${patch}-prerelease${increment}" #formato que se le da al nombre de la version generada
      id: version # id para referenciarlo en otros steps
    - name: Docker login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - name: Build Docker image
      env:
        NEW_VERSION: ${{ steps.version.outputs.version}} #dentro del step con id "version" tomar el valor de output llamado "version" (esto es un output que se puede ver en la documentacion de la extension)
      run: |
        docker build -t alvarorm114/docker-graphql:$NEW_VERSION .
        docker build -t alvarorm114/docker-graphql:latest .
    - name: Push Docker Image
      env:
        NEW_VERSION: ${{ steps.version.outputs.version}} #dentro del step con id "version" tomar el valor de output llamado "version" (esto es un output que se puede ver en la documentacion de la extension)
      run: |
        docker push alvarorm114/docker-graphql:$NEW_VERSION
        docker push alvarorm114/docker-graphql:latest
    
    #- name: Build the Docker image
    #  run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
